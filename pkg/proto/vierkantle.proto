syntax = "proto3";

package nl.vierkantle;

option go_package = "github.com/sgielen/vierkantle/pkg/proto";

service VierkantleService {
  rpc GetBoard(GetBoardRequest) returns (GetBoardResponse) {}

  rpc SubmitScore(SubmitScoreRequest) returns (SubmitScoreResponse) {}
  rpc GetScores(GetScoresRequest) returns (GetScoresResponse) {}

  // Generator
  rpc WordsForBoard(WordsForBoardRequest) returns (WordsForBoardResponse) {}
  rpc SeedBoard(SeedBoardRequest) returns (stream SeedBoardResponse) {}
  rpc FillInBoard(FillInBoardRequest) returns (stream FillInBoardResponse) {}

  rpc TeamStream(stream TeamStreamClientMessage) returns (stream TeamStreamServerMessage) {}
}

message GetBoardRequest {
  // Timezone offset in client's local time, as in Javascript Date.getTimezoneOffset()
  int32 timezoneOffsetMinutes = 1;
}

message GetBoardResponse {
  bytes board = 1;
  string name = 2;
}

message SubmitScoreRequest {
  int32 anonymous_id = 1;
  int32 team_size = 2;
  int32 words = 3;
  int32 seconds = 4;
  string boardName = 5;
}

message SubmitScoreResponse {
}

message GetScoresRequest {
  uint32 index = 1;
  uint32 amount = 2;
  uint32 my_anonymous_id = 3;
  string boardName = 4;
}

message GetScoresResponse {
  message Score {
    string name = 1;
    int32 team_size = 2;
    int32 words = 3;
    int32 seconds = 4;
  }
  map<int32, Score> scores = 1;
  int32 total_scores = 2;
  optional int32 your_score = 4;
}

message WordsForBoardRequest {
  bytes board = 1;
}

message WordsForBoardResponse {
  bytes board = 1;
}

message SeedBoardRequest {
  string seed_word = 1;
  int32 width = 2;
  int32 height = 3;
  int32 attempts = 4;
}

message SeedBoardResponse {
  bytes board = 1;
  int32 attempts = 2;
  int32 progress = 3;
}

message FillInBoardRequest {
  bytes board = 1;
  int32 attempts = 2;
}

message FillInBoardResponse {
  bytes board = 1;
  int32 attempts = 2;
  int32 progress = 3;
}

message CreateTeamRequest {
  string name = 1;
}

message JoinTeamRequest {
  string token = 1;
  string name = 2;
}

message ChangeNameRequest {
  string name = 1;
}

message WordGuessedRequest {
  string word = 1;
}

message TeamStreamClientMessage {
  oneof request {
    // The stream must start with one create or join message. After this, the
    // server responds with TeamInfoResponse, after which the create or join
    // must not be sent anymore. If the player name already exists in the team,
    // the server will respond with an ErrorResponse and the stream will be
    // closed.
    CreateTeamRequest create = 1;
    JoinTeamRequest join = 2;

    // When the player changes their name, send a ChangeNameRequest; the
    // server will respond with a new TeamInfoResponse to everyone. If the
    // name is already in use, the server will respond with an ErrorResponse
    // and the name will not be changed.
    ChangeNameRequest name = 3;

    // When the player guesses a word, send this request; the server will
    // send a WordGuessedResponse to all other players.
    WordGuessedRequest word = 4;
  }
}

message ErrorResponse {
  string error = 1;
}

message TeamInfoResponse {
  string token = 1;
  string your_name = 2;
  repeated string players = 3;
}

message WordGuessedResponse {
  string player = 1;
  string word = 2;
}

message TeamStreamServerMessage {
  oneof response {
    ErrorResponse error = 1;
    TeamInfoResponse team = 2;
    WordGuessedResponse word = 3;
  }
}
