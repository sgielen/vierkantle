// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VierkantleServiceClient is the client API for VierkantleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VierkantleServiceClient interface {
	Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	HelloStream(ctx context.Context, opts ...grpc.CallOption) (VierkantleService_HelloStreamClient, error)
}

type vierkantleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVierkantleServiceClient(cc grpc.ClientConnInterface) VierkantleServiceClient {
	return &vierkantleServiceClient{cc}
}

func (c *vierkantleServiceClient) Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, "/nl.vierkantle.VierkantleService/Hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vierkantleServiceClient) HelloStream(ctx context.Context, opts ...grpc.CallOption) (VierkantleService_HelloStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &VierkantleService_ServiceDesc.Streams[0], "/nl.vierkantle.VierkantleService/HelloStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &vierkantleServiceHelloStreamClient{stream}
	return x, nil
}

type VierkantleService_HelloStreamClient interface {
	Send(*HelloStreamRequest) error
	Recv() (*HelloStreamResponse, error)
	grpc.ClientStream
}

type vierkantleServiceHelloStreamClient struct {
	grpc.ClientStream
}

func (x *vierkantleServiceHelloStreamClient) Send(m *HelloStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *vierkantleServiceHelloStreamClient) Recv() (*HelloStreamResponse, error) {
	m := new(HelloStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VierkantleServiceServer is the server API for VierkantleService service.
// All implementations should embed UnimplementedVierkantleServiceServer
// for forward compatibility
type VierkantleServiceServer interface {
	Hello(context.Context, *HelloRequest) (*HelloResponse, error)
	HelloStream(VierkantleService_HelloStreamServer) error
}

// UnimplementedVierkantleServiceServer should be embedded to have forward compatible implementations.
type UnimplementedVierkantleServiceServer struct {
}

func (UnimplementedVierkantleServiceServer) Hello(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedVierkantleServiceServer) HelloStream(VierkantleService_HelloStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method HelloStream not implemented")
}

// UnsafeVierkantleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VierkantleServiceServer will
// result in compilation errors.
type UnsafeVierkantleServiceServer interface {
	mustEmbedUnimplementedVierkantleServiceServer()
}

func RegisterVierkantleServiceServer(s grpc.ServiceRegistrar, srv VierkantleServiceServer) {
	s.RegisterService(&VierkantleService_ServiceDesc, srv)
}

func _VierkantleService_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VierkantleServiceServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nl.vierkantle.VierkantleService/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VierkantleServiceServer).Hello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VierkantleService_HelloStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VierkantleServiceServer).HelloStream(&vierkantleServiceHelloStreamServer{stream})
}

type VierkantleService_HelloStreamServer interface {
	Send(*HelloStreamResponse) error
	Recv() (*HelloStreamRequest, error)
	grpc.ServerStream
}

type vierkantleServiceHelloStreamServer struct {
	grpc.ServerStream
}

func (x *vierkantleServiceHelloStreamServer) Send(m *HelloStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *vierkantleServiceHelloStreamServer) Recv() (*HelloStreamRequest, error) {
	m := new(HelloStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VierkantleService_ServiceDesc is the grpc.ServiceDesc for VierkantleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VierkantleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nl.vierkantle.VierkantleService",
	HandlerType: (*VierkantleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _VierkantleService_Hello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HelloStream",
			Handler:       _VierkantleService_HelloStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "vierkantle.proto",
}
