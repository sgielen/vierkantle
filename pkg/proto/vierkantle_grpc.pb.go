// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VierkantleServiceClient is the client API for VierkantleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VierkantleServiceClient interface {
	GetBoard(ctx context.Context, in *GetBoardRequest, opts ...grpc.CallOption) (*GetBoardResponse, error)
	// Generator
	WordsForBoard(ctx context.Context, in *WordsForBoardRequest, opts ...grpc.CallOption) (*WordsForBoardResponse, error)
	SeedBoard(ctx context.Context, in *SeedBoardRequest, opts ...grpc.CallOption) (*SeedBoardResponse, error)
	FillInBoard(ctx context.Context, in *FillInBoardRequest, opts ...grpc.CallOption) (*FillInBoardResponse, error)
	TeamStream(ctx context.Context, opts ...grpc.CallOption) (VierkantleService_TeamStreamClient, error)
}

type vierkantleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVierkantleServiceClient(cc grpc.ClientConnInterface) VierkantleServiceClient {
	return &vierkantleServiceClient{cc}
}

func (c *vierkantleServiceClient) GetBoard(ctx context.Context, in *GetBoardRequest, opts ...grpc.CallOption) (*GetBoardResponse, error) {
	out := new(GetBoardResponse)
	err := c.cc.Invoke(ctx, "/nl.vierkantle.VierkantleService/GetBoard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vierkantleServiceClient) WordsForBoard(ctx context.Context, in *WordsForBoardRequest, opts ...grpc.CallOption) (*WordsForBoardResponse, error) {
	out := new(WordsForBoardResponse)
	err := c.cc.Invoke(ctx, "/nl.vierkantle.VierkantleService/WordsForBoard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vierkantleServiceClient) SeedBoard(ctx context.Context, in *SeedBoardRequest, opts ...grpc.CallOption) (*SeedBoardResponse, error) {
	out := new(SeedBoardResponse)
	err := c.cc.Invoke(ctx, "/nl.vierkantle.VierkantleService/SeedBoard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vierkantleServiceClient) FillInBoard(ctx context.Context, in *FillInBoardRequest, opts ...grpc.CallOption) (*FillInBoardResponse, error) {
	out := new(FillInBoardResponse)
	err := c.cc.Invoke(ctx, "/nl.vierkantle.VierkantleService/FillInBoard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vierkantleServiceClient) TeamStream(ctx context.Context, opts ...grpc.CallOption) (VierkantleService_TeamStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &VierkantleService_ServiceDesc.Streams[0], "/nl.vierkantle.VierkantleService/TeamStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &vierkantleServiceTeamStreamClient{stream}
	return x, nil
}

type VierkantleService_TeamStreamClient interface {
	Send(*TeamStreamClientMessage) error
	Recv() (*TeamStreamServerMessage, error)
	grpc.ClientStream
}

type vierkantleServiceTeamStreamClient struct {
	grpc.ClientStream
}

func (x *vierkantleServiceTeamStreamClient) Send(m *TeamStreamClientMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *vierkantleServiceTeamStreamClient) Recv() (*TeamStreamServerMessage, error) {
	m := new(TeamStreamServerMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VierkantleServiceServer is the server API for VierkantleService service.
// All implementations should embed UnimplementedVierkantleServiceServer
// for forward compatibility
type VierkantleServiceServer interface {
	GetBoard(context.Context, *GetBoardRequest) (*GetBoardResponse, error)
	// Generator
	WordsForBoard(context.Context, *WordsForBoardRequest) (*WordsForBoardResponse, error)
	SeedBoard(context.Context, *SeedBoardRequest) (*SeedBoardResponse, error)
	FillInBoard(context.Context, *FillInBoardRequest) (*FillInBoardResponse, error)
	TeamStream(VierkantleService_TeamStreamServer) error
}

// UnimplementedVierkantleServiceServer should be embedded to have forward compatible implementations.
type UnimplementedVierkantleServiceServer struct {
}

func (UnimplementedVierkantleServiceServer) GetBoard(context.Context, *GetBoardRequest) (*GetBoardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBoard not implemented")
}
func (UnimplementedVierkantleServiceServer) WordsForBoard(context.Context, *WordsForBoardRequest) (*WordsForBoardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WordsForBoard not implemented")
}
func (UnimplementedVierkantleServiceServer) SeedBoard(context.Context, *SeedBoardRequest) (*SeedBoardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SeedBoard not implemented")
}
func (UnimplementedVierkantleServiceServer) FillInBoard(context.Context, *FillInBoardRequest) (*FillInBoardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FillInBoard not implemented")
}
func (UnimplementedVierkantleServiceServer) TeamStream(VierkantleService_TeamStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method TeamStream not implemented")
}

// UnsafeVierkantleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VierkantleServiceServer will
// result in compilation errors.
type UnsafeVierkantleServiceServer interface {
	mustEmbedUnimplementedVierkantleServiceServer()
}

func RegisterVierkantleServiceServer(s grpc.ServiceRegistrar, srv VierkantleServiceServer) {
	s.RegisterService(&VierkantleService_ServiceDesc, srv)
}

func _VierkantleService_GetBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBoardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VierkantleServiceServer).GetBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nl.vierkantle.VierkantleService/GetBoard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VierkantleServiceServer).GetBoard(ctx, req.(*GetBoardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VierkantleService_WordsForBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WordsForBoardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VierkantleServiceServer).WordsForBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nl.vierkantle.VierkantleService/WordsForBoard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VierkantleServiceServer).WordsForBoard(ctx, req.(*WordsForBoardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VierkantleService_SeedBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeedBoardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VierkantleServiceServer).SeedBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nl.vierkantle.VierkantleService/SeedBoard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VierkantleServiceServer).SeedBoard(ctx, req.(*SeedBoardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VierkantleService_FillInBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FillInBoardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VierkantleServiceServer).FillInBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nl.vierkantle.VierkantleService/FillInBoard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VierkantleServiceServer).FillInBoard(ctx, req.(*FillInBoardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VierkantleService_TeamStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VierkantleServiceServer).TeamStream(&vierkantleServiceTeamStreamServer{stream})
}

type VierkantleService_TeamStreamServer interface {
	Send(*TeamStreamServerMessage) error
	Recv() (*TeamStreamClientMessage, error)
	grpc.ServerStream
}

type vierkantleServiceTeamStreamServer struct {
	grpc.ServerStream
}

func (x *vierkantleServiceTeamStreamServer) Send(m *TeamStreamServerMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *vierkantleServiceTeamStreamServer) Recv() (*TeamStreamClientMessage, error) {
	m := new(TeamStreamClientMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VierkantleService_ServiceDesc is the grpc.ServiceDesc for VierkantleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VierkantleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nl.vierkantle.VierkantleService",
	HandlerType: (*VierkantleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBoard",
			Handler:    _VierkantleService_GetBoard_Handler,
		},
		{
			MethodName: "WordsForBoard",
			Handler:    _VierkantleService_WordsForBoard_Handler,
		},
		{
			MethodName: "SeedBoard",
			Handler:    _VierkantleService_SeedBoard_Handler,
		},
		{
			MethodName: "FillInBoard",
			Handler:    _VierkantleService_FillInBoard_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TeamStream",
			Handler:       _VierkantleService_TeamStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "vierkantle.proto",
}
