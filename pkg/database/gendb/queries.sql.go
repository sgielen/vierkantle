// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: queries.sql

package gendb

import (
	"context"
)

const getMyScore = `-- name: GetMyScore :one
SELECT my_score.team_size, my_score.words, my_score.seconds, (
	SELECT COUNT(their_score.ctid) FROM vierkantle.scores their_score
	WHERE their_score.board_name=$1
	AND (their_score.words > my_score.words
	  OR (their_score.words = my_score.words AND their_score.seconds < my_score.seconds)
	  OR (their_score.words = my_score.words AND their_score.seconds = my_score.seconds AND their_score.ctid < my_score.ctid)
	)
) AS rank
FROM vierkantle.scores my_score
WHERE my_score.board_name=$1 AND my_score.anonymous_id=$2
`

type GetMyScoreParams struct {
	BoardName   string
	AnonymousID int64
}

type GetMyScoreRow struct {
	TeamSize int32
	Words    int32
	Seconds  int32
	Rank     int64
}

func (q *Queries) GetMyScore(ctx context.Context, arg GetMyScoreParams) (GetMyScoreRow, error) {
	row := q.db.QueryRow(ctx, getMyScore, arg.BoardName, arg.AnonymousID)
	var i GetMyScoreRow
	err := row.Scan(
		&i.TeamSize,
		&i.Words,
		&i.Seconds,
		&i.Rank,
	)
	return i, err
}

const getScores = `-- name: GetScores :many
SELECT anonymous_id, team_size, words, seconds, COUNT(*) OVER() AS full_count
FROM vierkantle.scores
WHERE board_name=$1
ORDER BY words DESC, seconds ASC, ctid ASC
LIMIT $2 OFFSET $3
`

type GetScoresParams struct {
	BoardName string
	Limit     int32
	Offset    int32
}

type GetScoresRow struct {
	AnonymousID int64
	TeamSize    int32
	Words       int32
	Seconds     int32
	FullCount   int64
}

func (q *Queries) GetScores(ctx context.Context, arg GetScoresParams) ([]GetScoresRow, error) {
	rows, err := q.db.Query(ctx, getScores, arg.BoardName, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetScoresRow
	for rows.Next() {
		var i GetScoresRow
		if err := rows.Scan(
			&i.AnonymousID,
			&i.TeamSize,
			&i.Words,
			&i.Seconds,
			&i.FullCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setScore = `-- name: SetScore :exec
INSERT INTO vierkantle.scores (board_name, anonymous_id, team_size, words, seconds, started_at, updated_at)
VALUES ($1, $2, $3, $4, $5, NOW(), NOW())
ON CONFLICT (board_name, anonymous_id) DO UPDATE SET team_size=$3, words=$4, seconds=$5, updated_at=NOW()
`

type SetScoreParams struct {
	BoardName   string
	AnonymousID int64
	TeamSize    int32
	Words       int32
	Seconds     int32
}

func (q *Queries) SetScore(ctx context.Context, arg SetScoreParams) error {
	_, err := q.db.Exec(ctx, setScore,
		arg.BoardName,
		arg.AnonymousID,
		arg.TeamSize,
		arg.Words,
		arg.Seconds,
	)
	return err
}
